* What we ought to do..

- Get the image into matrix format, using Numpy I guess
- Convert the RGB values into YCbCr values, uses some sort of formula
- And off course RGB values are like numbers I guess.
- Now we have to find out from the Cb and Cr values, if its a skin or not
- IF there are in a certain domain they are face or I mean skin rather.
- Domain is already kinda known, but we can improve that by testing 
  and graphing to see what have the lowest variation.
- Now we can make a black and white binary image, 1 is black, O is
  white or something like that from the image matrix.
- This way we can look into whether if the algorithm is working so
  far and also, we can adjust our algorithm to filter out noises and all.
- To filter out noises, depending on the average scale of pixels that
  are close by remove the smaller group of pixels or something like that.
- Now we have an Idea of where the skin portion is, this will also
  include other body parts like hands and all.
- Which is why we use the next step, Eigenfaces
- Here we use Sirovich-Kirby method to match our face regions to a
  collection of sample data we provide from many images, we might get
  some online I'm not sure and according to Johnathan this is acceptable.
- I don't really have a lot of idea about how the matching works as of now.
- I know we have to convert them into grey scale and make the faces
  into certain size and then using something called eigen-vectors and
  lots of formulaes.
- grey scale because faster.
- Here we can eliminate other shapes like hands and all.
- Basically at this point we are confirming if the round objects are
  faces or not.
- I guess we can confirm after this step if its a face or not.
